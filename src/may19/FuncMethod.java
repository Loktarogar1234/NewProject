package may19;

public class FuncMethod {
    // Функциональным называется интерфейс, которые содержат ровно один абстрактный метод. Эти интерфейсы
    // предназначены для использования в функциональном программировании и лямбда-выражениях с Java 8
    // Основные особенности функциональных интерфейсов:
    // - Единственный абстрактный метод: Функциональный интерфейс должен содержать только 1 абстрактный метод.
    // Однако он может содержать любое количество методов по умолчанию или статических методов.
    // - Использование с лямбда-выражениями: Функциональные интерфейсы широко используются с
    // лямбда-выражениями что делает код более лаконичным и читабельным.

    public static void main(String[] args) {
        // Использование лямбда-выражения для реализации метода функционального интерфейса
        MyFunctionalInterface myFunc1 = () -> System.out.println("Executing functional interface method");

        // Вызов метода
        myFunc1.abstractMethod();

        // Вызов метода по умолчанию
        myFunc1.defaultMethod();

        // Вызов статического метода
        MyFunctionalInterface.staticMethod();

        // Использование лямбда-выражения для реализации метода функционального интерфейса
        MyFunctionalInterface myFunc2 = () -> System.out.println("Executing functional interface method");

        // Вызов метода
        myFunc2.abstractMethod();

        // Вызов метода по умолчанию
        myFunc2.defaultMethod();

        // Вызов статического метода
        MyFunctionalInterface.staticMethod();
    }

    @FunctionalInterface
    // Эта аннотация используется для обозначения функционального интерфейса. Она не является обязательной,
    // но рекомендуется для улучшения читаемости кода и для того, чтобы компилятор проверял соблюдение правил
    // функционального интерфейса.

    public interface MyFunctionalInterface {
        // Можно добавлять статические методы
        static void staticMethod() {
            System.out.println("This is a static method");
        }
        // Это абстрактный метод, но он не обозначается ключевым словом "abstract"
        // Абстрактный метод - это метод, который объявлен, но не имеет реализации в абстрактном классе.
        // Абстрактный класс содержит один или несколько абстрактных методов, которые должны быть реализованы
        // в подклассах этого абстрактного класса.
        // Для объявления абстрактного метода в Java используется ключевое слово "abstract" перед объявлением
        // метода, но без фигурных скобок и тела метода.
        // Подклассы абстрактного класса должны предоставить реализацию для всех абстрактных методов, иначе
        // они сами должны быть объявлены как абстрактные классы.

        void abstractMethod();

        // Можно добавлять методы по умолчанию
        default void defaultMethod() {
            System.out.println("This is a default method");
        }
    }
}
